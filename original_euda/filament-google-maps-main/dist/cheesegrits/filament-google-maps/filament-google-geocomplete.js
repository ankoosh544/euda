/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/filament-google-geocomplete.js":
/*!*****************************************************!*\
  !*** ./resources/js/filament-google-geocomplete.js ***!
  \*****************************************************/
/***/ (() => {

eval("function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nwindow.filamentGoogleGeocomplete = function ($wire, config) {\n  return {\n    geocoder: null,\n    mapEl: null,\n    config: {\n      debug: false,\n      statePath: '',\n      gmaps: '',\n      filterName: null,\n      reverseGeocodeFields: {},\n      latLngFields: {},\n      types: [],\n      countries: [],\n      isLocation: false,\n      placeField: 'formatted_address'\n    },\n    symbols: {\n      '%n': [\"street_number\"],\n      '%z': [\"postal_code\"],\n      '%S': [\"street_address\", \"route\"],\n      '%A1': [\"administrative_area_level_1\"],\n      '%A2': [\"administrative_area_level_2\"],\n      '%A3': [\"administrative_area_level_3\"],\n      '%A4': [\"administrative_area_level_4\"],\n      '%A5': [\"administrative_area_level_5\"],\n      '%a1': [\"administrative_area_level_1\"],\n      '%a2': [\"administrative_area_level_2\"],\n      '%a3': [\"administrative_area_level_3\"],\n      '%a4': [\"administrative_area_level_4\"],\n      '%a5': [\"administrative_area_level_5\"],\n      '%L': [\"locality\", \"postal_town\"],\n      '%D': [\"sublocality\"],\n      '%C': [\"country\"],\n      '%c': [\"country\"],\n      '%p': ['premise'],\n      '%P': ['premise']\n    },\n    loadGMaps: function loadGMaps() {\n      if (!document.getElementById('filament-google-maps-google-maps-js')) {\n        var script = document.createElement('script');\n        script.id = 'filament-google-maps-google-maps-js';\n        window.filamentGoogleMapsAsyncLoad = this.createAutocomplete.bind(this);\n        script.src = this.config.gmaps + '&callback=filamentGoogleMapsAsyncLoad';\n        document.head.appendChild(script);\n      } else {\n        var waitForGlobal = function waitForGlobal(key, callback) {\n          if (window[key]) {\n            callback();\n          } else {\n            setTimeout(function () {\n              waitForGlobal(key, callback);\n            }, 100);\n          }\n        };\n        waitForGlobal(\"filamentGoogleMapsAPILoaded\", function () {\n          this.createAutocomplete();\n        }.bind(this));\n      }\n    },\n    init: function init(mapEl) {\n      this.mapEl = mapEl;\n      this.config = _objectSpread(_objectSpread({}, this.config), config);\n      this.loadGMaps();\n    },\n    createAutocomplete: function createAutocomplete() {\n      var _this = this;\n      window.filamentGoogleMapsAPILoaded = true;\n      var fields = [\"address_components\", \"formatted_address\", \"geometry\", \"name\"];\n      if (!fields.includes(this.config.placeField)) {\n        fields.push(this.config.placeField);\n      }\n      var geocompleteOptions = {\n        fields: fields,\n        strictBounds: false,\n        types: this.config.types\n      };\n      var geocompleteEl = this.config.isLocation ? this.config.statePath + '-fgm-address' : this.config.statePath;\n      var geoComplete = document.getElementById(geocompleteEl);\n      if (geoComplete) {\n        window.addEventListener('keydown', function (e) {\n          if (e.key === 'U+000A' || e.key === 'Enter' || e.code === 'Enter') {\n            if (e.target.nodeName === 'INPUT' && e.target.type === 'text') {\n              e.preventDefault();\n              return false;\n            }\n          }\n        }, true);\n        var autocomplete = new google.maps.places.Autocomplete(geoComplete, geocompleteOptions);\n        autocomplete.setComponentRestrictions({\n          country: this.config.countries\n        });\n        autocomplete.addListener(\"place_changed\", function () {\n          var place = autocomplete.getPlace();\n          if (!place.geometry || !place.geometry.location) {\n            window.alert(\"No details available for input: '\" + place.name + \"'\");\n            return;\n          }\n          _this.setLocation(place);\n          _this.updateReverseGeocode(place);\n          _this.updateLatLng(place);\n        });\n        var geoLocate = document.getElementById(this.config.statePath + '-geolocate');\n        if (geoLocate) {\n          this.geocoder = new google.maps.Geocoder();\n          geoLocate.addEventListener('click', function (event) {\n            if (\"geolocation\" in navigator) {\n              navigator.geolocation.getCurrentPosition(function (position) {\n                var currentLatitude = position.coords.latitude;\n                var currentLongitude = position.coords.longitude;\n                var currentLocation = {\n                  lat: currentLatitude,\n                  lng: currentLongitude\n                };\n                _this.geocoder.geocode({\n                  location: currentLocation\n                }).then(function (response) {\n                  if (response.results[0]) {\n                    geoComplete.setAttribute('value', response.results[0].formatted_address);\n                    _this.setLocation(response.results[0]);\n                    _this.updateReverseGeocode(response.results[0]);\n                    _this.updateLatLng(response.results[0]);\n                  }\n                });\n              });\n            }\n          });\n        }\n      }\n    },\n    setLocation: function setLocation(place) {\n      if (this.config.isLocation) {\n        $wire.set(this.config.statePath, place.geometry.location);\n      } else {\n        $wire.set(this.config.statePath, place[this.config.placeField]);\n      }\n      if (this.config.filterName) {\n        var latPath = this.config.filterName + '.latitude';\n        var lngPath = this.config.filterName + '.longitude';\n        var lat = document.getElementById(latPath);\n        var lng = document.getElementById(lngPath);\n        if (lat && lng) {\n          lat.setAttribute('value', place.geometry.location.lat().toString());\n          lng.setAttribute('value', place.geometry.location.lng().toString());\n          $wire.set(latPath, place.geometry.location.lat().toString());\n          $wire.set(lngPath, place.geometry.location.lng().toString());\n        }\n      }\n    },\n    updateReverseGeocode: function updateReverseGeocode(place) {\n      if (Object.keys(this.config.reverseGeocodeFields).length > 0) {\n        if (place.address_components) {\n          //$wire.set(config.autocomplete, response.results[0].formatted_address);\n          var replacements = this.getReplacements(place.address_components);\n          for (var field in this.config.reverseGeocodeFields) {\n            var replaced = this.config.reverseGeocodeFields[field];\n            for (var replacement in replacements) {\n              replaced = replaced.split(replacement).join(replacements[replacement]);\n            }\n            for (var symbol in this.symbols) {\n              replaced = replaced.split(symbol).join('');\n            }\n            replaced = replaced.trim();\n            $wire.set(field, replaced);\n          }\n        }\n      }\n    },\n    updateLatLng: function updateLatLng(place) {\n      if (Object.keys(this.config.latLngFields).length > 0) {\n        if (place.geometry) {\n          $wire.set(this.config.latLngFields.lat, place.geometry.location.lat().toString());\n          $wire.set(this.config.latLngFields.lng, place.geometry.location.lng().toString());\n        }\n      }\n    },\n    getReplacements: function getReplacements(address_components) {\n      var _this2 = this;\n      var replacements = {};\n      address_components.forEach(function (component) {\n        for (var symbol in _this2.symbols) {\n          if (_this2.symbols[symbol].indexOf(component.types[0]) !== -1) {\n            if (symbol === symbol.toLowerCase()) {\n              replacements[symbol] = component.short_name;\n            } else {\n              replacements[symbol] = component.long_name;\n            }\n          }\n        }\n      });\n      if (this.config.debug) {\n        console.log(replacements);\n      }\n      return replacements;\n    }\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/filament-google-geocomplete.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/filament-google-geocomplete.js"]();
/******/ 	
/******/ })()
;